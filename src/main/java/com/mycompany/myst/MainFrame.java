/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.myst;

import java.awt.Frame;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Rodrigo
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jInput = new javax.swing.JTextArea();
        jExecuteButton = new javax.swing.JButton();
        jMainTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInput.setColumns(20);
        jInput.setRows(5);
        jScrollPane1.setViewportView(jInput);

        jExecuteButton.setText("Ejecutar");
        jExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExecuteButtonActionPerformed(evt);
            }
        });

        jMainTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jMainTitle.setText("MYST");

        jLabel1.setText("Ingresa tu código MYST");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jMainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(294, 294, 294))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jExecuteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jMainTitle)
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jExecuteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExecuteButtonActionPerformed
        // TODO add your handling code here:
        String entrada = jInput.getText();
        
        if (entrada.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay código para mostrar.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                Reader reader = new StringReader(entrada);
                Lexer lexer = new Lexer(reader);

                Token token;

                ArrayList<Personaje> personajes = new ArrayList<>();
                ArrayList<Enemigo> enemigos = new ArrayList<>();
                ArrayList<Mision> misiones = new ArrayList<>();

                while ((token = lexer.next_token()) != null && token.getTokenType() != constantes.EOF) {          
                    if(null != token.getTokenType()) {
                        switch (token.getTokenType()) {
                            case CHARACTER -> personajes.add(extraerPersonaje(lexer));
                            case ENEMY -> enemigos.add(extraerEnemigo(lexer));
                            case QUEST -> misiones.add(extraerMision(lexer));
                            default -> {
                            }
                        }
                    }
                        
                }

                VistaCompleta vista = new VistaCompleta();
                for(int i = 0; i < personajes.size(); i++) {
                    CharacterPanel characterPanel = new CharacterPanel(personajes.get(i));
                    vista.getPanelContenedor().add(characterPanel);

                    /*if( i < enemigos.size()) {
                        EnemyPanel ep = new EnemyPanel(enemigos.get(i));
                        vista.getPanelContenedor().add(ep);
                    }*/
                }
                
                for(int i = 0; i < enemigos.size(); i++) {
                    EnemyPanel enemyPanel = new EnemyPanel(enemigos.get(i));
                    vista.getPanelContenedor().add(enemyPanel);
                }
                
                // LUEGO PONERLOS EN OTRA VISTA 
                for(int i = 0; i < misiones.size(); i++) {
                    MissionPanel missionPanel = new MissionPanel(misiones.get(i));
                    vista.getPanelContenedor().add(missionPanel);
                }

                vista.pack();
                vista.setVisible(true);

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al analizar el código.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        
    }//GEN-LAST:event_jExecuteButtonActionPerformed

    public Personaje extraerPersonaje(Lexer lexer) throws IOException {
        Personaje personaje = new Personaje();

        Token token = lexer.next_token();  // Esperamos el nombre
        if (token.getTokenType() == constantes.STRING) {
            personaje.name = token.getLexeme().replace("\"", "");
        }

        token = lexer.next_token();  // Esperamos {
        if (!token.getLexeme().equals("{")) {
            System.err.println("Error: se esperaba '{'");
            return personaje;
        }

        // Leer los atributos hasta encontrar '}'
        while ((token = lexer.next_token()) != null && !token.getLexeme().equals("}")) {
            switch (token.getTokenType()) {
                case MP:
                    personaje.mp = leerValor(lexer);
                    break;
                case HP:
                    personaje.hp = leerValor(lexer);
                    break;
                case ATTACK:
                    personaje.attack = leerValor(lexer);
                    break;
                case DEFENSE:
                    personaje.defense = leerValor(lexer);
                    break;
                case SKILL:
                    personaje.skill = leerValor(lexer).replace("\"", "");
                    break;
                case MP_COST:
                    personaje.mp_cost = leerValor(lexer);
                    break;
                case DAMAGE:
                    personaje.damage = leerValor(lexer);
                    break;
                case GOLD:
                    personaje.gold = leerValor(lexer);
                    break;
                case LOOT:
                    personaje.loot = leerValor(lexer).replace("\"", "");
                    break;
                default:
                    break;
            }
        }

        return personaje;
    }
    
    public Enemigo extraerEnemigo(Lexer lexer) throws IOException {
        Enemigo enemigo = new Enemigo();

        Token token = lexer.next_token();  // Esperamos el nombre
        if (token.getTokenType() == constantes.STRING) {
            enemigo.name = token.getLexeme().replace("\"", "");
        }

        token = lexer.next_token();  // Esperamos {
        if (!token.getLexeme().equals("{")) {
            System.err.println("Error: se esperaba '{'");
            return enemigo;
        }

        // Leer los atributos hasta encontrar '}'
        while ((token = lexer.next_token()) != null && !token.getLexeme().equals("}")) {
            switch (token.getTokenType()) {
                case HP:
                    enemigo.hp = leerValor(lexer);
                    break;
                case ATTACK:
                    enemigo.attack = leerValor(lexer);
                    break;
                case DEFENSE:
                    enemigo.defense = leerValor(lexer);
                    break;
                case GOLD:
                    enemigo.gold = leerValor(lexer);
                    break;
                case LOOT:
                    enemigo.loot = leerValor(lexer).replace("\"", "");
                    break;
                default:
                    break;
            }
        }

        return enemigo;
    }
    
    public Mision extraerMision(Lexer lexer) throws IOException {
        Mision mision = new Mision();

        Token token = lexer.next_token();  // Esperamos el nombre
        if (token.getTokenType() == constantes.STRING) {
            mision.name = token.getLexeme().replace("\"", "");
        }

        token = lexer.next_token();  // Esperamos {
        if (!token.getLexeme().equals("{")) {
            System.err.println("Error: se esperaba '{'" +  "Linea" + token.getLine());
            return mision;
        }

        // Leer los atributos hasta encontrar '}'
        while ((token = lexer.next_token()) != null && !token.getLexeme().equals("}")) {
            switch (token.getTokenType()) {
                case REWARD:
                    mision.reward = leerValor(lexer).replace("\"", "");
                    break;
                case OBJECTIVE:
                    mision.goal = leerValor(lexer).replace("\"", "");
                    break;
                default:
                    break;
            }
        }

        return mision;
    }

    private String leerValor(Lexer lexer) throws IOException {
        Token token = lexer.next_token(); // Esperamos ':'
        if (!token.getLexeme().equals(":")) {
            System.err.println("Error: se esperaba ':'");
            return "undefined";
        }

        token = lexer.next_token(); // Esperamos el valor
        return token.getLexeme();
    }

    
    /*
    public Personaje extraerPersonaje(String entrada) {
        Personaje info = new Personaje();

        Pattern nameP = Pattern.compile("character\\s+\"([^\"]+)\"");
        Pattern hpP = Pattern.compile("hp\\s*:\\s*(\\d+)");
        Pattern mpP = Pattern.compile("mp\\s*:\\s*(\\d+)");
        Pattern sklP = Pattern.compile("skill\\s*:\\s*\"([^\"]+)\"");
        Pattern sklDamP = Pattern.compile("damage\\s*:\\s*\"([^\"]+)\"");
        Pattern sklCosP = Pattern.compile("mp_cost\\s*:\\s*\"([^\"]+)\"");
        Pattern goldP = Pattern.compile("gold\\s*:\\s*(\\d+)");
        Pattern atkP = Pattern.compile("attack\\s*:\\s*(\\d+)");
        Pattern defP = Pattern.compile("defense\\s*:\\s*(\\d+)");

        Matcher m;

        m = nameP.matcher(entrada); if (m.find()) info.name = m.group(1);
        m = hpP.matcher(entrada); if (m.find()) info.hp = m.group(1);
        m = mpP.matcher(entrada); if (m.find()) info.mp = m.group(1);
        m = sklP.matcher(entrada); if (m.find()) info.skill = m.group(1);
        m = sklDamP.matcher(entrada); if (m.find()) info.damage = m.group(1);
        m = sklCosP.matcher(entrada); if (m.find()) info.mp_cost = m.group(1);
        m = goldP.matcher(entrada); if (m.find()) info.gold = m.group(1);
        m = atkP.matcher(entrada); if (m.find()) info.attack = m.group(1);
        m = defP.matcher(entrada); if (m.find()) info.defense = m.group(1);

        return info;
    }

    public Enemigo extraerEnemigo(String entrada) {
        Enemigo enemigo = new Enemigo();

        Pattern nameP = Pattern.compile("enemy\\s+\"([^\"]+)\"");
        Pattern hpP = Pattern.compile("hp\\s*:\\s*(\\d+)");
        Pattern atkP = Pattern.compile("attack\\s*:\\s*(\\d+)");
        Pattern defP = Pattern.compile("defense\\s*:\\s*(\\d+)");
        Pattern goldP = Pattern.compile("gold\\s*:\\s*(\\d+)");
        Pattern lootP = Pattern.compile("loot\\s*:\\s*\"([^\"]+)\"");

        Matcher m;

        m = nameP.matcher(entrada); if (m.find()) enemigo.name = m.group(1);
        m = hpP.matcher(entrada); if (m.find()) enemigo.hp = m.group(1);
        m = atkP.matcher(entrada); if (m.find()) enemigo.attack = m.group(1);
        m = defP.matcher(entrada); if (m.find()) enemigo.defense = m.group(1);
        m = goldP.matcher(entrada); if (m.find()) enemigo.gold = m.group(1);
        m = lootP.matcher(entrada); if (m.find()) enemigo.loot = m.group(1);

        return enemigo;
    }
    */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jExecuteButton;
    private javax.swing.JTextArea jInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jMainTitle;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
