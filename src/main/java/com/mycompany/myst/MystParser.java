
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.myst;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MystParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MystParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MystParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MystParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\003\010" +
    "\000\002\006\005\000\002\006\005\000\002\006\006\000" +
    "\002\006\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\004\004\006\001\002\000\006\002\033\004" +
    "\006\001\002\000\006\002\uffff\004\uffff\001\002\000\004" +
    "\034\010\001\002\000\006\002\000\004\000\001\002\000" +
    "\004\027\011\001\002\000\004\030\012\001\002\000\006" +
    "\010\015\011\014\001\002\000\010\010\024\011\023\031" +
    "\022\001\002\000\004\027\020\001\002\000\004\027\016" +
    "\001\002\000\004\033\017\001\002\000\010\010\ufffb\011" +
    "\ufffb\031\ufffb\001\002\000\004\033\021\001\002\000\010" +
    "\010\ufffa\011\ufffa\031\ufffa\001\002\000\006\002\ufffc\004" +
    "\ufffc\001\002\000\004\027\027\001\002\000\004\027\025" +
    "\001\002\000\004\033\026\001\002\000\010\010\ufff9\011" +
    "\ufff9\031\ufff9\001\002\000\004\033\030\001\002\000\010" +
    "\010\ufff8\011\ufff8\031\ufff8\001\002\000\006\002\ufffd\004" +
    "\ufffd\001\002\000\006\002\ufffe\004\ufffe\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\010\002\003\003\006\004\004\001\001\000" +
    "\006\003\031\004\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MystParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MystParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MystParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Método para reportar errores
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error sintáctico");
        
        if (info instanceof Symbol) {
            Symbol s = (Symbol)info;
            Token t = (Token)s.value;
            
            if (s.left >= 0) {
                m.append(" en línea ").append(t.getLine())
                 .append(", columna ").append(t.getColumn());
            }
        }
        
        m.append(": ").append(message);
        System.err.println(m);
    }
	
	private Token getStackToken(int pos) {
        java.util.Stack stack = getStack();
        Symbol sym = (Symbol)stack.elementAt(stack.size()-pos);
        return (Token)sym.value;
    }

    private Stack getStack() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MystParser$actions {
  private final MystParser parser;

  /** Constructor */
  CUP$MystParser$actions(MystParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MystParser$do_action_part00000000(
    int                        CUP$MystParser$act_num,
    java_cup.runtime.lr_parser CUP$MystParser$parser,
    java.util.Stack            CUP$MystParser$stack,
    int                        CUP$MystParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MystParser$result;

      /* select the action based on the action number */
      switch (CUP$MystParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MystParser$stack.elementAt(CUP$MystParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MystParser$stack.elementAt(CUP$MystParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MystParser$stack.elementAt(CUP$MystParser$top-1)).value;
		RESULT = start_val;
              CUP$MystParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MystParser$stack.elementAt(CUP$MystParser$top-1)), ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MystParser$parser.done_parsing();
          return CUP$MystParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= CharacterBlock 
            {
              Object RESULT =null;

              CUP$MystParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), RESULT);
            }
          return CUP$MystParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= EnemyBlock 
            {
              Object RESULT =null;

              CUP$MystParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), RESULT);
            }
          return CUP$MystParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Program CharacterBlock 
            {
              Object RESULT =null;

              CUP$MystParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MystParser$stack.elementAt(CUP$MystParser$top-1)), ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), RESULT);
            }
          return CUP$MystParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= Program EnemyBlock 
            {
              Object RESULT =null;

              CUP$MystParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MystParser$stack.elementAt(CUP$MystParser$top-1)), ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), RESULT);
            }
          return CUP$MystParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CharacterBlock ::= CHARACTER ID COLON LLO attributes LLC 
            {
              Object RESULT =null;
		 
        Token idToken = getStackToken(2); // Para $2
        System.out.println("ID: " + idToken.getLexeme());
    
              CUP$MystParser$result = parser.getSymbolFactory().newSymbol("CharacterBlock",1, ((java_cup.runtime.Symbol)CUP$MystParser$stack.elementAt(CUP$MystParser$top-5)), ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), RESULT);
            }
          return CUP$MystParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // attributes ::= HP COLON NUMBER 
            {
              Object RESULT =null;

              CUP$MystParser$result = parser.getSymbolFactory().newSymbol("attributes",4, ((java_cup.runtime.Symbol)CUP$MystParser$stack.elementAt(CUP$MystParser$top-2)), ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), RESULT);
            }
          return CUP$MystParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // attributes ::= MP COLON NUMBER 
            {
              Object RESULT =null;

              CUP$MystParser$result = parser.getSymbolFactory().newSymbol("attributes",4, ((java_cup.runtime.Symbol)CUP$MystParser$stack.elementAt(CUP$MystParser$top-2)), ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), RESULT);
            }
          return CUP$MystParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // attributes ::= attributes HP COLON NUMBER 
            {
              Object RESULT =null;

              CUP$MystParser$result = parser.getSymbolFactory().newSymbol("attributes",4, ((java_cup.runtime.Symbol)CUP$MystParser$stack.elementAt(CUP$MystParser$top-3)), ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), RESULT);
            }
          return CUP$MystParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // attributes ::= attributes MP COLON NUMBER 
            {
              Object RESULT =null;

              CUP$MystParser$result = parser.getSymbolFactory().newSymbol("attributes",4, ((java_cup.runtime.Symbol)CUP$MystParser$stack.elementAt(CUP$MystParser$top-3)), ((java_cup.runtime.Symbol)CUP$MystParser$stack.peek()), RESULT);
            }
          return CUP$MystParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MystParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MystParser$do_action(
    int                        CUP$MystParser$act_num,
    java_cup.runtime.lr_parser CUP$MystParser$parser,
    java.util.Stack            CUP$MystParser$stack,
    int                        CUP$MystParser$top)
    throws java.lang.Exception
    {
              return CUP$MystParser$do_action_part00000000(
                               CUP$MystParser$act_num,
                               CUP$MystParser$parser,
                               CUP$MystParser$stack,
                               CUP$MystParser$top);
    }
}

}
