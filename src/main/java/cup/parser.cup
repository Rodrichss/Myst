package com.mycompany.myst;

import java_cup.runtime.*;
import java.util.*;

parser code {:
    // Método para reportar errores
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error sintáctico");
        
        if (info instanceof Symbol) {
            Symbol s = (Symbol)info;
            Token t = (Token)s.value;
            
            if (s.left >= 0) {
                m.append(" en línea ").append(t.getLine())
                 .append(", columna ").append(t.getColumn());
            }
        }
        
        m.append(": ").append(message);
        System.err.println(m);
    }
	
	private Token getStackToken(int pos) {
        java.util.Stack stack = getStack();
        Symbol sym = (Symbol)stack.elementAt(stack.size()-pos);
        return (Token)sym.value;
    }
:};

/* Terminales en el orden exacto para generar Sym.java como deseas */
terminal 
    
    CHARACTER, ENEMY, QUEST, DIALOGUE, HP, MP, ATTACK, DEFENSE,
    LOOT, REWARD, GOAL, SKILL, DAMAGE, MP_COST, GOLD, OPTION,
    START, END, ARROW, COLON, LLO, LLC, STRING, NUMBER, ID, TEXT;

/* No terminales */
non terminal Program, CharacterBlock, EnemyBlock, Statement, attributes;

/* Precedencias */
precedence left COLON;
precedence left ARROW;

/* Inicio de la gramática */
start with Program;

/* Reglas gramaticales */
Program ::= 
      CharacterBlock 
    | EnemyBlock
    | Program CharacterBlock
    | Program EnemyBlock
;

CharacterBlock ::= 
    CHARACTER ID COLON LLO attributes LLC
    {: 
        Token idToken = getStackToken(2); // Para $2
        System.out.println("ID: " + idToken.getLexeme());
    :}
;

attributes ::= 
      HP COLON NUMBER 
    | MP COLON NUMBER 
    | attributes HP COLON NUMBER 
    | attributes MP COLON NUMBER
;